{"version":3,"sources":["app/components/RandomAll.js","app/redux/actions/urlActions.js","app/api/index.js","app/redux/types.js","app/App.js","serviceWorker.js","app/redux/reducers/urlReducer.js","app/redux/reducers/index.js","app/redux/store.js","index.js"],"names":["RandomAll","console","log","this","props","fetchUrl","document","getElementById","select","execCommand","react_default","a","createElement","Fragment","className","onClick","copyUrl","alt","src","url","id","readOnly","value","Component","connect","state","imageUrl","dispatch","endpoint","arguments","length","undefined","concat","Promise","resolve","reject","axios","method","then","res","data","catch","err","dogAPI","response","type","payload","message","error","App","components_RandomAll","Boolean","window","location","hostname","match","initialState","combineReducers","action","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","render","es","src_app_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5f75e34.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUrl } from '../redux/actions/urlActions';\n\nclass RandomAll extends Component {\n  // Initial fetch for first render\n  componentDidMount() {\n    console.log('RandomAll - componentDidMount');\n    this.props.fetchUrl();\n  }\n\n  // Copy URL from textarea element\n  copyUrl() {\n    const copyText = document.getElementById('url');\n    copyText.select();\n    document.execCommand('copy');\n  }\n\n  render() {\n    console.log('RandomAll - RENDER');\n    return (\n      <React.Fragment>\n        <section className=\"btn-group\">\n          <button className=\"btn btn-copy\" onClick={this.copyUrl}>\n            Copy Image\n          </button>\n          <button className=\"btn btn-generate\" onClick={this.props.fetchUrl}>\n            New Image\n          </button>\n        </section>\n        <section className=\"container\">\n          <img\n            alt=\"\"\n            className=\"img\"\n            onClick={this.props.fetchUrl}\n            src={this.props.url}\n          />\n          <textarea id=\"url\" readOnly value={this.props.url} />\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  url: state.imageUrl.url,\n});\n\nexport default connect(mapStateToProps, { fetchUrl })(RandomAll);\n","import { FETCH_URL, ERROR } from '../types';\nimport dogAPI from '../../api';\n\nexport const fetchUrl = () => dispatch => {\n  dogAPI('random')\n    .then(response =>\n      dispatch({\n        type: FETCH_URL,\n        payload: response.message,\n      }),\n    )\n    .catch(error =>\n      dispatch({\n        type: ERROR,\n        payload: error,\n      }),\n    );\n};\n","import axios from 'axios';\n\nexport default (endpoint, value = '') => {\n  let url = '';\n  switch (endpoint) {\n    case 'random-all': {\n      url = 'https://dog.ceo/api/breeds/image/random';\n      break;\n    }\n    case 'random-breed': {\n      url = `https://dog.ceo/api/breed/${value}/images/random`;\n      break;\n    }\n    default: {\n      url = 'https://dog.ceo/api/breeds/image/random';\n      break;\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'GET',\n      url: url,\n    })\n      .then(res => resolve(res.data))\n      .catch(err => reject(err));\n  });\n};\n","export const FETCH_URL = 'FETCH_URL';\nexport const FETCH_BREEDS = 'FETCH_BREEDS';\nexport const ERROR = 'ERROR';\n","import React, { Component } from 'react';\nimport RandomAll from './components/RandomAll';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    console.log('App - RENDER');\n    return (\n      <React.Fragment>\n        <header className=\"header\">\n          <h1>Floof</h1>\n          <small>Discover all the doggos.</small>\n        </header>\n        <main>\n          <RandomAll />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_URL, ERROR } from '../types';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_URL:\n      console.log('REDUCER - urlReducer - FETCH_URL');\n      return {\n        // Spread existing state if any\n        ...state,\n        url: action.payload,\n      };\n    case ERROR:\n      console.log('REDUCER - urlReducer - ERROR');\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport urlReducer from './urlReducer';\n\nexport default combineReducers({\n  imageUrl: urlReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n// Initial state of app\nconst initialState = {};\n// Array of middleware\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer, // Main reducer linking all necessary reducer functions\n  initialState, // Initial state\n  applyMiddleware(...middleware), // Enhancers/middleware\n);\n\nexport default store;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './app/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// Redux imports\nimport { Provider } from 'react-redux';\nimport store from './app/redux/store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}