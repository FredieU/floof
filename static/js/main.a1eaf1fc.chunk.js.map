{"version":3,"sources":["utils/api.js","components/RandomAll.js","components/App.js","serviceWorker.js","index.js"],"names":["api","endpoint","value","arguments","length","undefined","url","concat","Promise","resolve","reject","axios","method","then","res","data","catch","err","RandomAll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","generate","bind","assertThisInitialized","copyUrl","_this2","console","log","dogAPI","response","setState","message","document","getElementById","select","execCommand","_this3","react_default","a","createElement","Fragment","className","onClick","alt","src","id","Component","App","components_RandomAll","Boolean","window","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAEeA,EAAA,SAACC,GAAyB,IAAfC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5BG,EAAM,GACV,OAAOL,GACL,IAAK,aACHK,EAAM,0CACN,MAEF,IAAK,eACHA,EAAG,6BAAAC,OAAgCL,EAAhC,kBACH,MAEF,QACEI,EAAM,0CAKV,OAAO,IAAIE,QAAQ,SAACC,EAASC,GAC3BC,IAAM,CACJC,OAAQ,MACRN,IAAKA,IAENO,KAAK,SAAAC,GAAG,OAAIL,EAAQK,EAAIC,QACxBC,MAAM,SAAAC,GAAG,OAAIP,EAAOO,QCsCVC,cA3Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXrB,IAAK,GACLsB,MAAO,IAGTR,EAAKS,SAAWT,EAAKS,SAASC,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAKY,QAAUZ,EAAKY,QAAQF,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAREA,mFAWC,IAAAa,EAAAV,KAElB,OADAW,QAAQC,IAAI,qBACLC,EAAO,UACXvB,KAAK,SAAAwB,GAAQ,OAAIJ,EAAKK,SAAS,CAAChC,IAAK+B,EAASE,YAC9CvB,MAAM,SAAAC,GAAG,OAAIgB,EAAKK,SAAS,CAACV,MAAOX,wCAIrBuB,SAASC,eAAe,OAChCC,SACTF,SAASG,YAAY,2CAGZ,IAAAC,EAAArB,KACT,OAAOa,EAAO,UACbvB,KAAK,SAAAwB,GAAQ,OAAIO,EAAKN,SAAS,CAAChC,IAAK+B,EAASE,YAC9CvB,MAAM,SAAAC,GAAG,OAAI2B,EAAKN,SAAS,CAACV,MAAOX,uCAKpC,OADAiB,QAAQC,IAAI,sBAEVU,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,WAASE,UAAU,aACjBJ,EAAAC,EAAAC,cAAA,UACEE,UAAU,eACVC,QAAU3B,KAAKS,SAFjB,YAKAa,EAAAC,EAAAC,cAAA,UACEE,UAAU,mBACVC,QAAU3B,KAAKM,UAFjB,aAMFgB,EAAAC,EAAAC,cAAA,OACEI,IAAI,GACJF,UAAU,MACVC,QAAU3B,KAAKM,SACfuB,IAAM7B,KAAKI,MAAMrB,MACnBuC,EAAAC,EAAAC,cAAA,YACEM,GAAG,MACHnD,MAAQqB,KAAKI,MAAMrB,cAtDLgD,aCkBTC,0LAdX,OADArB,QAAQC,IAAI,gBAEVU,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,0CAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACS,EAAD,eAVQF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASxB,SAASC,eAAe,SD2H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC","file":"static/js/main.a1eaf1fc.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default (endpoint, value = '') => {\n  let url = '';\n  switch(endpoint) {\n    case 'random-all': {\n      url = 'https://dog.ceo/api/breeds/image/random';\n      break;\n    }\n    case 'random-breed': {\n      url = `https://dog.ceo/api/breed/${value}/images/random`;\n      break;\n    }\n    default: {\n      url = 'https://dog.ceo/api/breeds/image/random';\n      break;\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'GET',\n      url: url\n    })\n    .then(res => resolve(res.data))\n    .catch(err => reject(err));\n  });\n}","import React, { Component } from 'react';\nimport dogAPI from '../utils/api.js';\n\nclass RandomAll extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: '',\n      error: ''\n    };\n\n    this.generate = this.generate.bind(this);\n    this.copyUrl = this.copyUrl.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('RandomAll - MOUNT');\n    return dogAPI('random')\n      .then(response => this.setState({url: response.message}))\n      .catch(err => this.setState({error: err}));\n  }\n\n  copyUrl() {\n    const copyText = document.getElementById('url');\n    copyText.select();\n    document.execCommand('copy');\n  }\n\n  generate() {\n    return dogAPI('random')\n    .then(response => this.setState({url: response.message}))\n    .catch(err => this.setState({error: err}));\n  }\n\n  render() {\n    console.log('RandomAll - RENDER');\n    return (\n      <React.Fragment>\n        <section className='btn-group'>\n          <button \n            className='btn btn-copy'\n            onClick={ this.copyUrl }>\n            Copy URL\n          </button>\n          <button \n            className='btn btn-generate'\n            onClick={ this.generate }>\n            Generate\n          </button>\n        </section>\n        <img \n          alt=''\n          className='img'\n          onClick={ this.generate }\n          src={ this.state.url } />\n        <textarea\n          id='url'\n          value={ this.state.url } />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RandomAll;","import React, { Component } from 'react';\nimport RandomAll from './RandomAll';\nimport '../App.css';\n\nclass App extends Component {\n  render() {\n    console.log('App - RENDER');\n    return (\n      <React.Fragment>\n        <header className=\"header\">\n          <h1>Floof</h1>\n          <small>Discover all the doggos.</small>\n        </header>\n        <main>\n          <RandomAll />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}